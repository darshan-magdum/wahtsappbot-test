"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));
var _get2 = _interopRequireDefault(require("@babel/runtime/helpers/get"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _classPrivateFieldGet4 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldGet"));
var _classPrivateFieldSet2 = _interopRequireDefault(require("@babel/runtime/helpers/classPrivateFieldSet"));
var _botframeworkStreaming = require("botframework-streaming");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var _connectCalled = /*#__PURE__*/new WeakMap();
var _handleNetworkInformationChange = /*#__PURE__*/new WeakMap();
var _initialNetworkInformationType = /*#__PURE__*/new WeakMap();
var _networkInformation = /*#__PURE__*/new WeakMap();
var WebSocketClientWithNetworkInformation = /*#__PURE__*/function (_WebSocketClient) {
  (0, _inherits2["default"])(WebSocketClientWithNetworkInformation, _WebSocketClient);
  var _super = _createSuper(WebSocketClientWithNetworkInformation);
  function WebSocketClientWithNetworkInformation(_ref) {
    var _this;
    var disconnectionHandler = _ref.disconnectionHandler,
      networkInformation = _ref.networkInformation,
      requestHandler = _ref.requestHandler,
      url = _ref.url;
    (0, _classCallCheck2["default"])(this, WebSocketClientWithNetworkInformation);
    _this = _super.call(this, {
      disconnectionHandler: disconnectionHandler,
      requestHandler: requestHandler,
      url: url
    });
    _connectCalled.set((0, _assertThisInitialized2["default"])(_this), {
      writable: true,
      value: false
    });
    _handleNetworkInformationChange.set((0, _assertThisInitialized2["default"])(_this), {
      writable: true,
      value: function value() {
        return (0, _classPrivateFieldGet4["default"])((0, _assertThisInitialized2["default"])(_this), _initialNetworkInformationType) === (0, _classPrivateFieldGet4["default"])((0, _assertThisInitialized2["default"])(_this), _networkInformation).type || _this.disconnect();
      }
    });
    _initialNetworkInformationType.set((0, _assertThisInitialized2["default"])(_this), {
      writable: true,
      value: void 0
    });
    _networkInformation.set((0, _assertThisInitialized2["default"])(_this), {
      writable: true,
      value: void 0
    });
    (0, _classPrivateFieldSet2["default"])((0, _assertThisInitialized2["default"])(_this), _networkInformation, networkInformation);
    return _this;
  }

  // According to W3C Network Information API, https://wicg.github.io/netinfo/#handling-changes-to-the-underlying-connection.
  // NetworkInformation.onChange event will be fired on any changes to: `downlinkMax`, `type`, `downlink`, or `rtt`.
  (0, _createClass2["default"])(WebSocketClientWithNetworkInformation, [{
    key: "connect",
    value:
    // TODO: Better, the `NetworkInformation` instance should be passed to `BrowserWebSocketClient` -> `BrowserWebSocket`.
    //       `BrowserWebSocket` is where it creates `WebSocket` object.
    //       The `NetworkInformation` instance should accompany `WebSocket` and forcibly close it on abort.
    //       Maybe `botframework-streaming` should accept ponyfills.
    function connect() {
      if ((0, _classPrivateFieldGet4["default"])(this, _connectCalled)) {
        console.warn('botframework-directlinejs: connect() can only be called once.');
        return Promise.resolve();
      }
      (0, _classPrivateFieldSet2["default"])(this, _connectCalled, true);
      if ((0, _classPrivateFieldGet4["default"])(this, _networkInformation)) {
        var _classPrivateFieldGet2 = (0, _classPrivateFieldGet4["default"])(this, _networkInformation),
          initialType = _classPrivateFieldGet2.type;
        (0, _classPrivateFieldSet2["default"])(this, _initialNetworkInformationType, initialType);
        if (initialType === 'none') {
          console.warn('botframework-directlinejs: Failed to connect while offline.');
          return Promise.reject(new Error('botframework-directlinejs: Failed to connect while offline.'));
        }
        (0, _classPrivateFieldGet4["default"])(this, _networkInformation).addEventListener('change', (0, _classPrivateFieldGet4["default"])(this, _handleNetworkInformationChange));
      }
      return (0, _get2["default"])((0, _getPrototypeOf2["default"])(WebSocketClientWithNetworkInformation.prototype), "connect", this).call(this);
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      var _classPrivateFieldGet3;
      (_classPrivateFieldGet3 = (0, _classPrivateFieldGet4["default"])(this, _networkInformation)) === null || _classPrivateFieldGet3 === void 0 ? void 0 : _classPrivateFieldGet3.removeEventListener('change', (0, _classPrivateFieldGet4["default"])(this, _handleNetworkInformationChange));
      (0, _get2["default"])((0, _getPrototypeOf2["default"])(WebSocketClientWithNetworkInformation.prototype), "disconnect", this).call(this);
    }
  }]);
  return WebSocketClientWithNetworkInformation;
}(_botframeworkStreaming.WebSocketClient);
exports["default"] = WebSocketClientWithNetworkInformation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,